package test;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Random;

public class CTF_JAVA {

    /**
     * 已知e，d，n，分解n
     *
     * @param e 公钥e
     * @param d 私钥d
     * @param n 模数n
     * @return p，q
     */
    public static BigInteger[] attack(BigInteger e, BigInteger d, BigInteger n) {
        // p,q
        BigInteger[] result = new BigInteger[2];
        // k=de-1
        BigInteger k = d.multiply(e).subtract(BigInteger.ONE);
        Random random = new Random();
        while (true) {
            BigInteger g = new BigInteger(n.bitLength(), random);
            // 选择随机数g，1<g<n
            while (g.compareTo(BigInteger.ONE) <= 0 || g.compareTo(n) >= 0)
                g = new BigInteger(n.bitLength(), random);
            BigInteger k1 = k;
            // 计算t和g^(k/2^i)的过程合在一起
            while (k1.mod(BigInteger.TWO).equals(BigInteger.ZERO)) {
                // 如果k为偶数，就除以2
                k1 = k1.shiftRight(1);
                // 此时g^(k/2^i)=g^k1
                BigInteger x = g.modPow(k1, n);
                // 计算y=gcd(x−1,n)，直接赋值给p(result[0])
                result[0] = x.subtract(BigInteger.ONE).gcd(n);
                // 如果x>1且y=gcd(x−1,n)>1
                if (x.compareTo(BigInteger.ONE) > 0 && result[0].compareTo(BigInteger.ONE) > 0) {
                    result[1] = n.divide(result[0]);
                    return result;
                }
            }
        }
    }

    public static void main(String[] args) {
        BigInteger e = new BigInteger("3683191938452247871641914583009119792552938079110383367782698429399084083048335018186915282465581498846777124014232879019914546010406868697694661244001972931366227108140590201194336470785929194895915077935083045957890179080332615291089360169761324533970721460473221959270664692795701362942487885620152952927112838769014944652059440137350285198702402612151501564899791870051001152984815689187374906618917967106000628810361686645504356294175173529719443860140795170776862320812544438211122891112138748710073230404456268507750721647637959502454394140328030018450883598342764577147457231373121223878829298942493059211583");
        BigInteger d = new BigInteger("1779217788383673416690068487595062922771414230914791138743960472798057054853883175313487137767631446949382388070798609545617543049566741624609996040273727");
        BigInteger n = new BigInteger("24493816160588971749455534346389861269947121809901305744877671102517333076424951483888863597563544011725032585417200878377314372325231470164799594965293350352923195632229495874587039720317200655351788887974047948082357232348155828924230567816817425104960545706688263839042183224681231800805037117758927837949941052360649778743187012198508745207332696876463490071925421229447425456903529626946628855874075846839745388326224970202749994059533831664092151570836853681204646481502222112116971464211748086292930029540995987019610460396057955900244074999111267618452967579699626655472948383601391620012180211885979095636919");
        System.out.println(Arrays.toString(attack(e, d, n)));
    }

}
